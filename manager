#!/bin/bash

# ~~~~~ CONFIGURATIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~

# Script Version
export VERSION="v0.1 (Preview)"

# ~~~~~ DO NOT EDIT BELOW THIS LINE ~~~~~~~~~~~~~

function divider() {
	echo -e "\e[90m$(yes "\e[90m─\e[0m" | sed ''''$(stty size | awk '{print $2}')'''q' | tr -d '\n')\e[0m"
}

function red() {
	echo -e "\e[31;1m!!!\e[0;1m $@\e[0m"
}
function yellow() {
	echo -e "\e[33;1m!!!\e[0;1m $@\e[0m"
}
function h2() {
	echo -e "\e[36;1m--- $@\e[0m"
}
function green() {
	echo -e "\e[32;1m>>>\e[0;1m $@\e[0m"
}
function choose() {
	echo -e -n "$@ \e[1m[\e[32mY\e[0;1m/\e[31mn\e[0;1m]\e[0m "
	read user_choice
	if [[ $(echo $user_choice | grep -i "n") ]]; then
		export return=1
	else
		export return=0
	fi
}

function choice() {
	echo -e -n "\e[33;1m>>> Enter a number to select: \e[0m "
	read choice
}

function try() {
	echo -e -n "\e[90m"
	eval "$@"
	case $? in
	"0")
		green "$@"
		;;
	*)
		echo -e -n "\e[0m"
		yellow "$@"
		choose "Do you want to run this command with sudo? (You may need to fix some issues before that)"
		case $return in
		"0")
			echo -e -n "\e[90m"
			sudo "$@"
			case $? in
			"0")
				green "$@"
				;;
			*)
				red "$@"
				exit 1
				;;
			esac
			;;
		"1")
			red "Disagreed"
			exit 1
			;;
		esac
		;;
	esac
}

function Checking() {
	{ [[ -d $1 ]] || [[ -f $1 ]]; } || { try mkdir -p "$1" && try chmod 777 -R "$1"; }
}

# Moved to manager.conf
export CONFIG="$(dirname "$0")/manager.conf"
if [[ -f $CONFIG ]]; then
	source "$CONFIG"
else
	yellow "The config file is not found, we will open the configurator for you."
	choose "Should we open the configurator and create a config file for you?"
	case $return in
	"0")
		try bash "$(dirname "$0")/tools/menuconfig.sh"
		;;
	"1")
		red "Disagreed"
		exit 1
		;;
	esac
fi

if [[ ! $DIR ]]; then
	red "You need to set a directory"
	exit 1
fi

if [[ ! $BRANCH ]]; then
	red "You need to set a branch name"
	exot 1
fi

if [[ $1 ]]; then
	if [[ $(command -v lsb_release) ]]; then
		if [[ $(lsb_release -i | grep -i "arch") ]]; then
			green "Arch Linux detected"
		else
			red "This script is only allowed to run on Arch Linux."
			exit 1
		fi
	else
		if [[ $(cat /etc/os-release | grep -i "arch") ]]; then
			green "Arch Linux detected"
		else
			red "This script is only allowed to run on Arch Linux."
			exit 1
		fi
	fi
	try Checking "$DIR"/home
	try Checking "$DIR"/config
	try Checking "$DIR"/etc
	try Checking "$DIR"/env
fi

# ~~~~~ MAIN FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~

function update() {
	if [[ $HOME ]]; then
		for dotfile in "${DOTFILES[@]}"; do
			export position="$HOME/$dotfile"
			try cp -rpuv "$position" "$DIR"/home
		done
	fi

	if [[ $CONFIG ]]; then
		for config in "${CONFIG[@]}"; do
			export position="$HOME/.config/$config"
			try cp -rpuv "$position" "$DIR"/config
		done
	fi

	if [[ $ETC ]]; then
		for etc in "${ETC[@]}"; do
			export position="/etc/$etc"
			try cp -rpuv "$position" "$DIR"/etc
		done
	fi

	if [[ $(command -v pacman) ]]; then
		try "pacman -Qq > "$DIR"/env/pacman.list"
	fi
}

function init() {
	if [[ ! -d "$DIR/.git" ]]; then
		h2 "You need to initialize a Git repository first."
		try git init
		try git branch -M main
		h2 "Adding remote repository"
		read -p "Your username is " username
		read -p "Your token/passwd is " token
		read -p "Your repo url is https://" link
		export link="https://$username:$token@$link"
		try git remote add origin "$link"
	else
		green "You have already initialized a Git repository."
	fi
}

function push() {
	[[ -d "$DIR"/.git ]] || init
	try git add .
	h2 "You need to input a commit message"
	read -p "Your commit message is " MSG
	try git commit -am \""$MSG"\"
	try git branch -M "$BRANCH"
	try git push -uf origin "$BRANCH"
}

function select_commit() {
	# 获取格式化的提交日志并倒序排列（不显示哈希）
	local commits
	commits=$(git log --reverse --pretty=format:"%s")
	date=$(git log --reverse --pretty=format:"%ad" --date=format:"%y.%m.%d")

	# 显示提交日志并让用户选择
	h2 "We will revert to"
	IFS=$'\n' read -r -d '' -a commit_array <<<"$commits"
	DATE=$'\n' read -r -d '' -a date_array <<<"$date"

	for i in "${!commit_array[@]}"; do
		if [[ $i -eq $(git log --reverse --pretty=format:"%H" | nl -v 0 | grep "$(git rev-parse HEAD)" | awk '{print $1}') ]]; then
			echo -e "    \e[1;31m$i\e[0;1m ${commit_array[$i]}\e[0m \e[2;90m${date_array[$i]}\e[0m" # 当前版本标红
		else
			echo -e "    \e[1;32m$i\e[0;1m ${commit_array[$i]}\e[0m \e[2;90m${date_array[$i]}\e[0m"
		fi
	done

	# 读取用户选择
	choice
	if [[ ! $choice =~ ^[0-9]+$ ]] || ((choice < 0 || choice >= ${#commit_array[@]})); then
		red "Not a valid choice, please enter a number between 0 and $((${#commit_array[@]} - 1))."
		exit 1
	fi

	# 获取对应的提交哈希
	local selected_commit="${commit_array[$choice]}"
	local hash
	hash=$(git log --reverse --pretty=format:"%H %s %ad" --date=format:"%y.%m.%d" | grep -F -m 1 "${selected_commit}" | awk '{print $1}')

	# 检查是否成功提取到哈希值
	if [[ -z "$hash" ]]; then
		red "We couldn't find the commit hash for your choice."
		exit 1
	fi

	# 显示短哈希值并确认是否恢复
	local short_hash="${hash:0:7}"
	h2 "Revert"
	choose "Should we revert to commit $short_hash?"
	case $return in
	"0")
		try git reset --hard "$hash"
		;;
	"1")
		red "Disagreed"
		exit 1
		;;
	esac
}

function copy() {
	h2 "Copy your dotfiles"
	choose "Should we copy your dotfiles to $HOME?"
	case $return in
	"0")
		for dotfile in "${DOTFILES[@]}"; do
			export position="$DIR/home/$dotfile"
			try cp -rpuv "$position" "$HOME"
		done
		;;
	"1")
		red "Disagreed"
		;;
	esac

	h2 "Copy your config files"
	choose "Should we copy your config files to $HOME/.config?"
	case $return in
	"0")
		for config in "${CONFIG[@]}"; do
			export position="$DIR/config/$config"
			try rm -rf "$HOME/.config/$config"
			try cp -rpuv "$position" "$HOME/.config"
		done
		;;
	"1")
		red "Disagreed"
		;;
	esac
	h2 "Copy your etc configs"
	choose "Should we copy your etc configs to /etc?"
	case $return in
	"0")
		for etc in "${ETC[@]}"; do
			export position="$DIR/etc/$etc"
			try rm -rf "/etc/$etc"
			try cp -rpuv "$position" "/etc/$etc"
		done
		;;
	"1")
		red "Disagreed"
		;;
	esac
	h2 "Install packages"
	choose "Should we install your packages?"
	case $return in
	"0")
		if [[ $(command -v yay) ]]; then
			try yay -S --needed - <"$DIR"/env/pacman.list
		elif [[ $(command -v paru) ]]; then
			try paru -S --needed - <"$DIR"/env/pacman.list
		else
			red "No AUR helper found, please install it manually"
		fi
		;;
	"1")
		red "Disagreed"
		;;
	esac
}

function pull() {
	try git pull
}

function generate_readme() {
	local readme_path="$DIR/README.md"

	# 获取 CPU 信息
	local cpu_info
	cpu_info=$(grep -m 1 "model name" /proc/cpuinfo | awk -F': ' '{print $2}')
	if [[ -z "$cpu_info" ]]; then
		cpu_info="Unknown CPU"
	fi

	# 获取内存信息
	local memory_info
	memory_info=$(grep -m 1 "MemTotal" /proc/meminfo | awk '{printf "%.2f GB", $2 / 1024 / 1024}')
	if [[ -z "$memory_info" ]]; then
		memory_info="Unknown Memory"
	fi

	# 写入标题和说明
	cat >"$readme_path" <<EOF
# ✨ Silvaire's Dotfiles

> [!NOTE]
> I use Silvaire's Dotfiles Manager btw

## 💻 HOSTS

| ITEMS  | VALUES                               |
| ------ | ------------------------------------ |
| Kernel | $(uname -r)                          |
| System | $(lsb_release -d | awk -F'\t' '{print $2}') |
| CPU    | $cpu_info                            |
| GPU    | $(lspci | grep -i vga | awk -F': ' '{print $2}') |
| Memory | $memory_info                         |



## 🤔 Dotfiles Manager
How can I use this dotfiles manager?

> [!CAUTION]
> This script is only allowed to run on Arch Linux.

0. Install \`git\` and \`bash\`
1. Clone this repository.
2. Delete config, env, etc, home, README.md and manager.conf.
3. Run \`manager --config\` to configure your dotfiles manager.
4. Run \`manager -i\` to initialize the git repository.
5. Run \`manager -p\` to copy your dotfiles and push your changes.

> [!TIP]
> You can use \`manager --config\` to open the configurator.


## ⚙️ PACKAGES

| CONFIG        | ETC          | HOME        |
| ------------- | ------------ | ----------- |
EOF

	# 写入配置文件
	local max_length=$((${#CONFIG[@]} > ${#ETC[@]} ? ${#CONFIG[@]} : ${#ETC[@]}))
	max_length=$((max_length > ${#DOTFILES[@]} ? max_length : ${#DOTFILES[@]}))

	for ((i = 0; i < max_length; i++)); do
		local config_item="${CONFIG[i]:-}"
		local etc_item="${ETC[i]:-}"
		local home_item="${DOTFILES[i]:-}"
		printf "| %-13s | %-12s | %-11s |\n" "$config_item" "$etc_item" "$home_item" >>"$readme_path"
	done

	green "README.md has been generated at $readme_path"
}

case $1 in
"-r")
	update
	;;
"-i")
	init
	;;
"-p")
	update
	init
	# Auto generate README.md
	generate_readme
	if [[ -z "$(git status --porcelain)" ]]; then
		red "No changes to commit"
		exit 1
	fi
	push
	;;
"-l")
	pull
	;;
"-b")
	init
	select_commit
	;;
"-c")
	copy
	;;
#Fun Tools
"--config")
	try bash "$(dirname "$0")/tools/menuconfig.sh"
	;;
*)
	echo -e "
\e[0;1mSilvaire's Dotfiles Manager\e[0m \e[2;90m$VERSION\e[0m
Released under the \e[0;1mGPL v3.0\e[0m license.
\e[31;1mThis script is only allowed to run on Arch Linux.\e[0m

\e[0;1mUsage: $0 [option]\e[0m

\e[0;1mOptions:\e[0m
  \e[0;1m-b\e[0m  Revert to one of the previous commits
  \e[0;1m-c\e[0m  Reproduce your dotfiles
  \e[0;1m-i\e[0m  Initialize the git repository (if not already initialized)
  \e[0;1m-l\e[0m  Pull the latest changes from the remote repository
  \e[0;1m-p\e[0m  Recopy and push your changes to the remote repository
  \e[0;1m-r\e[0m  Recopy your dotfiles

\e[0;1mFun Tools:\e[0m
  \e[0;1m--config\e[0m  Open Dotfiles Manager Configurator

\e[0;1mTips:\e[0m
  You can run \e[1m$0 [option] | yes\e[0m
  to automatically answer all the questions with 'yes'.

\e[0;1mWARNING:\e[0m
  1. Please don't move this script to another directory,
     because there is a config file in the same directory.
  2. For security reasons, 
     when you delete a software's name from the config file, 
     we will not automatically delete that software's config file for you.
"
	exit 1
	;;
esac
